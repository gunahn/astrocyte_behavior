#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Created on Fri Mar  3 10:46:40 2023

@author: gunahn
"""

import numpy as np
import pandas as pd
import seaborn as sns
import matplotlib.pyplot as plt
from scipy.signal import find_peaks
from statistics import mean
import os
import glob

def plot_svg_and_take_peaks(variable_name, animal_number, path, day, today):
    df = pd.read_csv(path)
    df = df.drop(columns=['Unnamed: 0'])
    signal = df[1000:]
    signal = signal.reset_index(drop=True)
    # get the last index of initiation == 0
    last_initiation = signal[signal['TTL_initiation'].diff() == -1]['relative_time'].index[-1]
    # exclude data after the last initiation
    signal = signal[:last_initiation+300]
    #reset the index
    signal = signal.reset_index(drop=True)

    change_signal_init = signal[signal.TTL_initiation.diff() == -1]
    df_diff = pd.DataFrame(change_signal_init['relative_time'].diff())
    b_plot = df_diff.boxplot()
    outliers = b_plot.get_lines()[-1].get_ydata()
    q1 = b_plot.get_lines()[2].get_ydata()[0]
    q3 = b_plot.get_lines()[3].get_ydata()[0]
    max_except_outliers = b_plot.get_lines()[2].get_ydata()[1]
    hist, bin_edges = np.histogram(change_signal_init['relative_time'].diff()[1:])

    print(hist)
    print(bin_edges)
    criteria = q1
    criteria_name = 'q1'
    # find the times that change_signal_init['relative_time'].diff() is greater than max_except_outliers
    habitual_time = change_signal_init['relative_time'][change_signal_init['relative_time'].diff() < criteria]
    # find the times that change_signal_init['relative_time'].diff() is less than max_except_outliers
    non_habitual_time_start = change_signal_init['relative_time'][change_signal_init['relative_time'].diff() > criteria]
    # calculate the non_habitual_time_period in index format
    periods = []
    periods_in_time = []

    for end_point in non_habitual_time_start.index:
        index_of_start = list(change_signal_init['relative_time'].diff().index).index(end_point) - 1
        starting_point = change_signal_init['relative_time'].diff().index[index_of_start]
        periods.append((starting_point, end_point))
        periods_in_time.append(
            (change_signal_init['relative_time'][starting_point], change_signal_init['relative_time'][end_point]))

    # show the periods with the graph of signal
    signal['Hapitual_phase'] = True

    for period in periods:
        signal.loc[period[0]:period[1], 'Hapitual_phase'] = False
    # calculate the number of peaks in each period
    number_of_peaks_habitual = []
    number_of_peaks_non_habitual = []
    # calculate the number of peaks in each period
    peaks, peak_heights = find_peaks(signal[variable_name], distance=300,
                                     height=np.quantile(signal[variable_name], 0.99))
    for peak in peaks:
        if peak in signal[signal['Hapitual_phase'] == True].index:
            number_of_peaks_habitual.append(peak)
        else:
            number_of_peaks_non_habitual.append(peak)

    probablity_habit = len(number_of_peaks_habitual)
    probablity_non_habit = len(number_of_peaks_non_habitual)

    haibt_time = len(signal[signal['Hapitual_phase'] == True])
    non_haibt_time = len(signal[signal['Hapitual_phase'] == False])

    normalized_habit = probablity_habit * haibt_time / (haibt_time + non_haibt_time)
    normalized_non_habit = probablity_non_habit * non_haibt_time / (haibt_time + non_haibt_time)

    pb_normalized_habit = normalized_habit / (normalized_habit + normalized_non_habit)
    pb_normalized_non_habit = normalized_non_habit / (normalized_habit + normalized_non_habit)

    sum_total = len(number_of_peaks_habitual) + len(number_of_peaks_non_habitual)
    probablity_habit = len(number_of_peaks_habitual) / sum_total
    probablity_non_habit = len(number_of_peaks_non_habitual) / sum_total
    plt.clf()
    # plt.scatter(signal[signal['TTL_correct_choice'].diff()==-1]['relative_time'], signal[signal['TTL_correct_choice'].diff()==-1]['TTL_correct_choice']-5, label = 'correct choice',s =0.1)
    # plt.scatter(signal[signal['TTL_turn'].diff()==-1]['relative_time'], signal[signal['TTL_turn'].diff()==-1]['TTL_turn']-4.5, label = 'turn', s =0.1)
    # plot non-hapitual phase
    peak_heights['peak_heights'].sort()

    second_height = peak_heights['peak_heights'][-1]
    plt.scatter(signal[signal['TTL_initiation'].diff() == -1]['relative_time'],
                signal[signal['TTL_initiation'].diff() == -1]['TTL_initiation'] + second_height + 0.2,
                label='initiation', s=1)

    for period in periods_in_time[:-1]:
        plt.plot(period, np.zeros(len(period)) + second_height + 0.5, color='red')

    plt.plot(periods_in_time[-1], np.zeros(len(periods_in_time[-1])) + second_height + 0.5, color='red',
             label='Exploitation')
    plt.plot(signal['relative_time'][number_of_peaks_habitual], signal[variable_name][number_of_peaks_habitual], "x",
             label='Peaks in exploitation')
    plt.plot(signal['relative_time'][number_of_peaks_non_habitual],
             signal[variable_name][number_of_peaks_non_habitual], "x", color='red', label='Peaks in exploration')

    # plt.plot(signal['relative_time'], (signal['Red-L-z(DA)']), 'r--', label = 'Dopamine L')
    plt.plot(signal['relative_time'], (signal[variable_name]), 'g-', label=variable_name)
    # plt.plot(signal['relative_time'], (signal['Green-L-z(Ast)']), 'g--', label = 'GCaMP L')

    plt.rcParams['pdf.use14corefonts'] = True
    plt.xlabel("Time sec")
    plt.ylabel("Z-score")
    plt.legend(loc='lower right', borderaxespad=0.)
    plt.title('{} signal and peak with behavioral events_animal{}_day{}'.format(variable_name, animal_number, day))
    # put the title of the plot
    # save plot in svg file format
    plt.savefig('/Users/gunahn/Desktop/MIT/Habit_Breaking_Da_Ast/result/{}/{}/GCaMP(R) signal and peak with behavioral events_with_{}_animal{}_day_{}_{}.svg'.format(variable_name, animal_number,criteria_name, animal_number,day,today), format='svg', dpi=1200)

    plt.show()

    return pb_normalized_habit, pb_normalized_non_habit, change_signal_init['relative_time'].diff()[1:].values
#%%
today = "0428"
from tqdm import tqdm
list_num_peak_habitual = []
list_num_peak_non_habitual = []
list_time_difference = []
variable_names = ['Green-L-z(Ast)','Green-R-z(Ast)' , 'Red-L-z(DA)', 'Red-R-z(DA)']
variable_name = variable_names[0]

for animal_number in range(1,5):
    list_all = glob.glob(('/Users/gunahn/Desktop/MIT/Habit_Breaking_Da_Ast/Data/GFAP_Combined_Behavioral_Signal_0421/{}/*.csv').format(animal_number))

    list_all.sort()

    for idx in tqdm(range(len(list_all))):
        try:
            os.makedirs('/Users/gunahn/Desktop/MIT/Habit_Breaking_Da_Ast/result/{}/{}'.format(variable_name, animal_number))
        except FileExistsError:
            # directory already exists
            pass
        print(int(list_all[idx][111:113]))
        num_peak_habitual,num_peak_non_habitual, time_difference_between_init  = plot_svg_and_take_peaks(variable_name, animal_number, list_all[idx], int(list_all[idx][111:113]),today)
        list_num_peak_habitual.append(num_peak_habitual)
        list_num_peak_non_habitual.append(num_peak_non_habitual)
        list_time_difference.append(time_difference_between_init)
#%%
import matplotlib.pyplot as plt
import numpy as np
from scipy import stats
import seaborn as sns
import random
animal_name = [0]*13 + [1]*14 +[2]*13+ [3]*9
data_df = np.array([animal_name,
        list_num_peak_habitual,
        list_num_peak_non_habitual])

df = pd.DataFrame(data = data_df).T

df.columns = ["animal_name", "exploit", "explore"]
# Create a boxplot of the data
plt.clf()
plt.boxplot([list_num_peak_habitual, list_num_peak_non_habitual], labels = ['peak in Exploitation', 'peak in Exploration'])
# Add a title and axis labels
plt.title('Pb of {} peaks between two phase_normalized_time_animal1~4'.format(variable_name))
plt.ylabel('Probability')
colors = ['red', 'green', 'blue', 'orange']
#markers = ['o', 's', 'v', 'x']
for animal_number in range(4):
    df_per_animal = df[df.animal_name == animal_number]
    random_list = np.array([random.uniform(-0.01, 0.01) for i in range(len(df_per_animal))])
    plt.scatter(random_list+ 0.925 + 0.05 * animal_number, df_per_animal.exploit,
                c=colors[animal_number], alpha=0.5, s =5)
    plt.scatter(random_list + 0.925+1 + 0.05 * animal_number, df_per_animal.explore,
                c=colors[animal_number], alpha=0.5, s = 5)
    """ 
    plt.scatter(np.zeros(len(df_per_animal)) + 0.9625 + 0.025 * animal_number, df_per_animal.exploit,
                c=colors[animal_number], alpha=0.2, s =2)
    plt.scatter(np.ones(len(df_per_animal)) + 0.9625 + 0.025 * animal_number, df_per_animal.explore,
                c=colors[animal_number], alpha=0.2, s = 2)
    """

# Calculate the p-value using a t-test
t, p = stats.ttest_ind(list_num_peak_habitual, list_num_peak_non_habitual)

# Add the p-value to the plot
plt.text(1.5, max(max(list_num_peak_habitual), max(list_num_peak_non_habitual)), 'p={:0.2g}'.format(p), ha='center')
if p < 0.0001:
    plt.text(1.5, max(max(list_num_peak_habitual), max(list_num_peak_non_habitual)) - 0.05, '****', ha='center')
elif p < 0.001:
    plt.text(1.5, max(max(list_num_peak_habitual), max(list_num_peak_non_habitual)) - 0.05, '***', ha='center')
elif p < 0.01:
    plt.text(1.5, max(max(list_num_peak_habitual), max(list_num_peak_non_habitual)) - 0.05, '**', ha='center')
elif p < 0.05:
    plt.text(1.5, max(max(list_num_peak_habitual), max(list_num_peak_non_habitual)) - 0.05, '*', ha='center')
else:
    plt.text(1.5, max(max(list_num_peak_habitual), max(list_num_peak_non_habitual)) - 0.05, 'ns', ha='center')

# Show the plot
plt.savefig('/Users/gunahn/Desktop/MIT/Habit_Breaking_Da_Ast/result/{}/Probability of peaks between two phase_normalized_time.svg'.format(variable_name), format='svg', dpi=1200)
plt.show()
#%%
# violin plot



sns.violinplot([list_num_peak_habitual, list_num_peak_non_habitual], color ='white')
plt.xticks([0, 1], ['peak in Exploitation', 'peak in Exploration'])

# Add a title and axis labels
plt.title('Pb of {} peaks between two phase_normalized_time_animal1~4'.format(variable_name))
plt.ylabel('Probability')
colors = ['red', 'green', 'blue', 'orange']
#markers = ['o', 's', 'v', 'x']
for animal_number in range(4):
    df_per_animal = df[df.animal_name == animal_number]
    random_list = np.array([random.uniform(-0.01, 0.01) for i in range(len(df_per_animal))])
    plt.scatter(random_list+ 0.925-1 + 0.05 * animal_number, df_per_animal.exploit,
                c=colors[animal_number], alpha=0.3, s =2)
    plt.scatter(random_list + 0.925 + 0.05 * animal_number, df_per_animal.explore,
                c=colors[animal_number], alpha=0.3, s = 2)

# Calculate the p-value using a t-test
t, p = stats.ttest_ind(list_num_peak_habitual, list_num_peak_non_habitual)

# Add the p-value to the plot
plt.text(0.5, max(max(list_num_peak_habitual), max(list_num_peak_non_habitual)), 'p={:0.2g}'.format(p), ha='center')
if p < 0.0001:
    plt.text(0.5, max(max(list_num_peak_habitual), max(list_num_peak_non_habitual)) - 0.05, '****', ha='center')
elif p < 0.001:
    plt.text(.5, max(max(list_num_peak_habitual), max(list_num_peak_non_habitual)) - 0.05, '***', ha='center')
elif p < 0.01:
    plt.text(.5, max(max(list_num_peak_habitual), max(list_num_peak_non_habitual)) - 0.05, '**', ha='center')
elif p < 0.05:
    plt.text(.5, max(max(list_num_peak_habitual), max(list_num_peak_non_habitual)) - 0.05, '*', ha='center')
else:
    plt.text(1.5, max(max(list_num_peak_habitual), max(list_num_peak_non_habitual)) - 0.05, 'ns', ha='center')

# Show the plot
plt.savefig('/Users/gunahn/Desktop/MIT/Habit_Breaking_Da_Ast/result/{}/Violin_Probability of_peaks between two phase_normalized_time.svg'.format(variable_name), format='svg', dpi=1200)
plt.show()

#%%
list_for_df = []
for animal_number in range(1,5):
    list_all = glob.glob(('/Users/gunahn/Desktop/MIT/Habit_Breaking_Da_Ast/Data/GFAP_Combined_Behavioral_Signal_0421/{}/*.csv').format(animal_number))

    list_all.sort()
    list_for_df.extend(list_all)
list_for_day = []
for i in list_for_df:
    list_for_day.append(i[111:113])
df['day'] =  list_for_day

df['time_diffrerence_init'] = list_time_difference
#%%
# calculating the hist and edegs from list_time_difference
hist_list = []
edges_list = []
for i in list_time_difference:
    hist, edges = np.histogram(i)
    hist_list.append(hist)
    edges_list.append(edges)
df['hist'] = hist_list
df['edges'] = edges_list
#%%
df.to_csv('/Users/gunahn/Desktop/MIT/Habit_Breaking_Da_Ast/result/{}/df.csv'.format(variable_name))